
open Format
open Lib
open Ast
open Tast

let debug = ref false

let dummy_loc = Lexing.dummy_pos, Lexing.dummy_pos

exception Error of Ast.location * string
exception Anomaly of string

let error loc e = raise (Error (loc, e))

let rec sizeof = function
	| Tint | Tbool | Tstring | Tptr _ -> 8
	| Tstruct s -> s.s_size
	| Twild -> 0
	| Tmany l -> 
		let rec aux s = function
			| [] -> s
			| t :: q -> s + sizeof (Tmany q)
		in aux 0 l


(* L'environnement utilisé pour les variables *)

let evar v = { expr_desc = TEident v; expr_typ = v.v_typ }

let new_var =
  let id = ref 0 in
  fun x loc ?(used=false) ty ->
    incr id;
    { v_name = x; v_id = !id; v_loc = loc; v_typ = ty; v_used = used; v_addr = 0; v_depth = 0 }

module Env = struct
  module M = Map.Make(String)
  type t = var M.t
  let empty = M.empty
  let mem = M.mem
  let find = M.find
  let add env v = M.add v.v_name v env

  let all_vars = ref []
  let check_unused () =
    let check v =
      if v.v_name <> "_" && (not v.v_used) then error v.v_loc ("unused variable: " ^ v.v_name) in (* on lève une erreur si une variable n'est pas utilisée *)
    List.iter check !all_vars


  let var x loc ?used ty env =
    let v = new_var x loc ?used ty in
    all_vars := v :: !all_vars;
    add env v, v

end


(* Notre environnement pour les types structure est simplement une table de hachage *)
(* Elle associe un string (nom de la structure) à une structure parsée (type Ast.pstruct) *)
let pstruct_env = Hashtbl.create 0

(* On a besoin de quelques fonctions pour chercher et ajouter des éléments dans cette table *)

let mem_pstruct = Hashtbl.mem pstruct_env

let find_pstruct = Hashtbl.find pstruct_env

let add_pstruct ps =
	if mem_pstruct ps.ps_name.id
		then error ps.ps_name.loc ("struct " ^ ps.ps_name.id ^ " defined twice")
		else Hashtbl.add pstruct_env ps.ps_name.id ps (* On vérifie au passage que les noms de structures sont uniques avant de les ajouter à l'environnement *)

(* Une fonction qui teste si il n'y a pas de structure récursive *)

let check_rec () =
	let is_rec name ps =
		let rec aux vus = function
			| [] -> ()
			| (id, ptyp) :: reste -> match ptyp with
				| PTident { id = "int" } 
				| PTident { id = "bool" }
				| PTident { id = "string" }
				| PTptr _ -> ()
				| PTident { loc = loc; id = pss } ->
					if List.mem pss vus
					then error loc ("recursive structure:" ^ pss)
					else
						if (not (mem_pstruct pss))
						then error loc ("undefined structure" ^ pss)
						else begin
							aux (pss :: vus) (find_pstruct pss).ps_fields;
							aux (pss :: vus) reste
						end
		in aux [name] ps.ps_fields
	in Hashtbl.iter is_rec pstruct_env


(* On a aussi besoin d'une fonction qui transforme une structure parsée (type Ast.pstruct) en une structure bien typée (type Tast.structure) *)
(* Pour cela on utilise une nouvelle table de hachage qui va contenir les structures, pour éviter de tout recalculer à chaque fois *)
(* Sachant que le type des éléments de la structure est contenue dans celle-ci il faut que notre fonction soit mutuellement récursive avec type_type *)

let struct_env = Hashtbl.create 0

let mem_struct = Hashtbl.mem struct_env

let find_struct = Hashtbl.find struct_env

let add_struct s = Hashtbl.add struct_env s.s_name s

let rec pstruct_to_structure ps =
	if mem_struct ps.ps_name.id
	then find_struct ps.ps_name.id
	else begin
		let fields = Hashtbl.create (List.length ps.ps_fields) in
		let s = { s_name = ps.ps_name.id;
				  s_fields = fields;
				  s_size = 0 } in
		add_struct s;
		let rec fill_fields ofs = function
			| []              -> ofs
			| (id, ptyp) :: reste ->
				let f = { f_name = id.id;
						  f_typ = (type_type ptyp);
						  f_ofs = ofs}
				in begin
					if Hashtbl.mem fields id.id
					then error id.loc ("the name" ^ id.id ^ " is used twice in the structure " ^ s.s_name)
					else
						Hashtbl.add fields id.id f;
						fill_fields (ofs + sizeof (f.f_typ)) reste
				end
		in let size = fill_fields 0 ps.ps_fields in
		s.s_size <- size;
		s
	end

and type_type = function
  | PTident { id = "int" } -> Tint
  | PTident { id = "bool" } -> Tbool
  | PTident { id = "string" } -> Tstring
  | PTptr ty -> Tptr (type_type ty)
  | PTident { loc = loc; id = ps } -> 
		try (* pour les structures on cherche simplement si elle est dans l'environnement *)
			Tstruct (pstruct_to_structure (find_pstruct ps))
		with Not_found -> error loc ("struct " ^ ps ^ " not defined, or is recursive")


(* Notre environnement pour les fonctions est simplement une table de hachage *)
(* Elle associe un string (nom de la fonction) à fonction parsée (type Ast.pfunc) *)
let pfunc_env = Hashtbl.create 0

(* Les fonctions de base associées *)

let mem_pfunc = Hashtbl.mem pfunc_env

let find_pfunc = Hashtbl.find pfunc_env

let add_pfunc pf =
	if mem_pfunc pf.pf_name.id
		then error pf.pf_name.loc ("function " ^ pf.pf_name.id ^ " defined twice")
		else Hashtbl.add pfunc_env pf.pf_name.id pf (* On vérifie au passage que les noms de fonction sont uniques avant de les ajouter à l'environnement *)

(* Et la conversion vers une fonction bien typée (type Tast.function_) *)
(* Cette fonction renvoie la fonction bien typée, l'environnement des variables de ses paramètres (type Env.t), et le corps de la fonction (type Ast.pexpr) *)

let func_env = Hashtbl.create 0 (* Dans cette table on associe les nom d'une fonction à un triplet contenant la fonction bien typée, l'environnement de ses paramètres (type Env.t), et le corps de la fonction (type Ast.pexpr) *)

let mem_func = Hashtbl.mem func_env

let find_func = Hashtbl.find func_env

let add_func f =
	let fn, _, _ = f in
	Hashtbl.add func_env fn.fn_name f

let pfunc_to_function_ pf =
	if mem_func pf.pf_name.id
	then find_func pf.pf_name.id
	else begin
		let env = ref Env.empty in
		let pparam_to_var (id, ptyp) =
			if Env.mem id.id !env
			then error id.loc ("the name " ^ id.id ^ " is used twice in the arguments of the function " ^ pf.pf_name.id)
			else
				let e, v = Env.var id.id id.loc (type_type ptyp) !env
				in env := e; v
		in let fn = { fn_name = pf.pf_name.id;
					  fn_params = List.map pparam_to_var pf.pf_params;
					  fn_typ = List.map type_type pf.pf_typ }
		in let f = fn, !env, pf.pf_body
		in add_func f;
		f
	end

(* Le type d'une fonction est ici une liste de types, mais on a besoin d'en faire un type (avec Tmany) *)

let rec typl_to_typ = function
	| [x] -> x
	| _ as l -> Tmany(l)


(* La fonction qui teste le bon typage d'un test d'égalité *)
let rec eq_type ty1 ty2 = match ty1, ty2 with
  | Tint, Tint | Tbool, Tbool | Tstring, Tstring -> true
  | Tstruct s1, Tstruct s2 -> s1 == s2
  | Tptr ty1, Tptr ty2 -> eq_type ty1 ty2
  | Tmany l1, Tmany l2 -> begin
		match l1, l2 with
		| [], [] -> true
		| ty1 :: q1, ty2 :: q2 -> (eq_type ty1 ty2) && (eq_type (Tmany q1) (Tmany q2))
		| _ -> false
	end
	(* pour le type Tmany on traite récursivement tous les types de la liste *)
  | Twild, _ | _, Twild -> true
	(* une équation avec Twild est toujours bien typée *)
  | _ -> false


let fmt_used = ref false
let fmt_imported = ref false


let tvoid = Tmany []
let make d ty = { expr_desc = d; expr_typ = ty }
let stmt d = make d tvoid


(* Une fonction qui transforme un type (Tast.typ) en string *)

let rec string_of_typ = function
	| Tint -> "int"
	| Tbool -> "bool"
	| Tstring -> "string"
	| Tstruct s -> s.s_name
	| Tptr ty -> "*" ^ (string_of_typ ty)
	| Tmany [] -> "void"
	| Tmany l ->
		let rec aux s = function
			| [] -> s ^ "]"
			| [ty] -> s ^ (string_of_typ ty) ^ "]"
			| ty :: reste -> aux (s ^ (string_of_typ ty) ^ ", ") reste
		in aux "[" l
	| Twild -> "???"


(* On a besoin de savoir si une expression est une l-value ou pas *)

let rec is_l_value pe = match pe.pexpr_desc with
	| PEident _ -> true
	| PEdot (e, id) -> is_l_value e
	| PEunop (Ustar, e) -> e.pexpr_desc <> PEnil
	| _ -> false


(* Une fonction qui gère les listes de listes de types *)

let rec flatten = function
	| [] -> []
	| Tmany(l) :: reste -> (flatten l) @ (flatten reste)
	| (_ as ty) :: reste -> ty :: (flatten reste)


(* La fonction qui transforme une expression parsée (Ast.pexpr) en une expression bien typée (Tast.expr) après avoir fait toutes lse vérifications nécessaires *)

let ret_typ = ref tvoid

let rec expr env e =
 let e, ty, rt = expr_desc env e.pexpr_loc e.pexpr_desc in
  { expr_desc = e; expr_typ = ty }, rt

and expr_desc env loc = function

	| PEskip -> (* skip *)
		TEskip, tvoid, false

	| PEconstant c -> begin (* pour les constantes on regarde leur type *)
		match c with
			| Cbool _ -> TEconstant c, Tbool, false
			| Cint _ -> TEconstant c, Tint, false
			| Cstring _ -> TEconstant c, Tstring, false
	end
	
	| PEbinop (op, e1, e2) -> begin (* les deux membres d'une opération binaire doivent avoir des types qui correspondent *)
		let exp1, rt1 = expr env e1 in
		let exp2, rt2 = expr env e2 in
		if (exp1.expr_desc = TEnil) && (exp2.expr_desc = TEnil) then error loc ("cannot operate with two nil") else
		let ty1 = exp1.expr_typ in
		let ty2 = exp2.expr_typ in
		match op, ty1, ty2 with
			| Beq, _, _ | Bne, _, _ ->
				if eq_type ty1 ty2
				then TEbinop(op, exp1, exp2), Tbool, false
				else error loc ("same types expected for an equality test, but " ^ (string_of_typ ty1) ^ " and " ^ (string_of_typ ty2) ^ " were given")
			| Blt, Tint, Tint | Ble, Tint, Tint | Bgt, Tint, Tint | Bge, Tint, Tint ->
				TEbinop(op, exp1, exp2), Tbool, false
			| Blt, _, _ | Ble, _, _ | Bgt, _, _ | Bge, _, _ ->
				error loc ("int expected for a comparison test, but " ^ (string_of_typ ty1) ^ " and " ^ (string_of_typ ty2) ^ " were given")
			| Badd, Tint, Tint | Bsub, Tint, Tint | Bmul, Tint, Tint | Bdiv, Tint, Tint | Bmod, Tint, Tint ->
				TEbinop(op, exp1, exp2), Tint, false
			| Badd, _, _ | Bsub, _, _ | Bmul, _, _ | Bdiv, _, _ | Bmod, _, _ ->
				error loc ("int expected for an arithmetic operation, but " ^ (string_of_typ ty1) ^ " and " ^ (string_of_typ ty2) ^ " were given")
			| Band, Tbool, Tbool | Bor, Tbool, Tbool ->
				TEbinop(op, exp1, exp2), Tbool, false
			| Band, _, _ | Bor, _, _ ->
				error loc ("bool expected for a logic operation, but " ^ (string_of_typ ty1) ^ " and " ^ (string_of_typ ty2) ^ " were given")
	end

	| PEunop (Uamp, e1) -> begin (* & doit forcément être suivi par une l-value *)
		if is_l_value e1
		then let exp1, rt1 = expr env e1 in TEunop(Uamp, exp1), Tptr(exp1.expr_typ), false
		else error loc ("l-value expected after &")
	end
	
	| PEunop (Uneg, e1) -> begin (* - doit forcément être suivi par un entier *)
		let exp1, rt1 = expr env e1 in
		match exp1.expr_typ with
			| Tint -> TEunop(Uneg, exp1), Tint, false
			| _ as ty -> error loc ("int expected after -, but " ^ (string_of_typ ty) ^ " was given")
	end
	
	| PEunop (Unot, e1) -> begin (* ! doit forcément être suivi par un booléen *)
		let exp1, rt1 = expr env e1 in
		match exp1.expr_typ with
			| Tbool -> TEunop(Unot, exp1), Tbool, false
			| _ as ty -> error loc ("bool expected after !, but " ^ (string_of_typ ty) ^ " was given")
	end

	| PEunop (Ustar, e1) -> begin (* * doit forcément être suivi par un pointeur *)
		let exp1, rt1 = expr env e1 in
		match exp1.expr_typ with
			| Tptr ty -> TEunop(Ustar, exp1), ty, false
			| _ as ty -> error loc ("pointer expected after *, but " ^ (string_of_typ ty) ^ " was given")
	end

	| PEcall ({id = "fmt.Print"}, el) -> begin (* fmt.Print doit forcément être importé pour être utilisé *)
		if (not !fmt_imported)
		then error loc ("fmt called but not imported")
		else
			fmt_used := true;
			TEprint(List.map (fun e -> fst(expr env e)) el), tvoid, false
	end

	| PEcall ({id="new"}, [{pexpr_desc=PEident {loc = loc; id = id}}]) -> begin (* avec new on doit regarder le type *)
		let ty = match id with
			| "int" -> Tint | "bool" -> Tbool | "string" -> Tstring
			| _ as ps ->
				try (* pour les structures on cherche simplement si elle est dans l'environnement *)
					Tstruct (pstruct_to_structure (find_pstruct ps))
				with Not_found -> error loc ("struct " ^ id ^ " not defined")
		in TEnew ty, Tptr ty, false
	end

	| PEcall ({id="new"}, _) ->
		error loc "new expects a type"

	| PEcall (id, el) -> begin (* les fonctions appelés doivent être bien définies, avoir le bon nombre d'arguments et ceux-ci doivent avoir le bon type *)
		if (not (mem_pfunc id.id))
		then error id.loc ("unknown function called: " ^ id.id)
		else
			let pf = find_pfunc id.id in
			let f, f_env, f_body = pfunc_to_function_ pf in
			let n = List.length f.fn_params in
			let k = List.length (flatten (List.map (fun e -> (fst(expr env e)).expr_typ) el)) in
			if k < n then error id.loc ("missing arguments in calling function " ^ f.fn_name ^ ": " ^ (string_of_int k) ^ " were given but " ^ (string_of_int n) ^ " were expected")
			else if k > n then error id.loc ("too many arguments in calling function " ^ f.fn_name ^ ": " ^ (string_of_int k) ^ " were given but " ^ (string_of_int n) ^ " were expected")
			else begin
				let expl = List.map (fun e -> fst(expr env e)) el in
				let given_types = typl_to_typ (flatten (List.map (fun e -> e.expr_typ) expl)) in
				let expected_types = typl_to_typ (List.map (fun v -> v.v_typ) f.fn_params) in
				if (eq_type given_types expected_types)
				then TEcall(f, expl), typl_to_typ (f.fn_typ), false
				else error id.loc ("wrong argument types in calling function " ^ f.fn_name ^ ": " ^ (string_of_typ given_types) ^ " was given but " ^ (string_of_typ expected_types) ^ " was expected")
			end
	end

	| PEfor (e, b) -> begin (* la condition d'une boucle for doit être un booléen *)
		let expe, rte = expr env e in
		let expb, rtb = expr env b in
		match expe.expr_typ with
			| Tbool -> TEfor(expe, expb), tvoid, false
			| _ as ty -> error loc ("bool expected after command for, but " ^ (string_of_typ ty) ^ " was given")
	end

	| PEif (e1, e2, e3) -> begin (* la condition d'un 'if then else' doit être un booléen, et les deux branches doivent avoir le même type *)
		let exp1, rt1 = expr env e1 in
		let exp2, rt2 = expr env e2 in
		let exp3, rt3 = expr env e3 in
		match exp1.expr_typ with
			| Tbool ->
				if (eq_type exp2.expr_typ exp3.expr_typ)
				then TEif(exp1, exp2, exp3), exp2.expr_typ, (rt2 && rt3)
				else error loc ("same types expected in 'if then else' command, but " ^ (string_of_typ exp2.expr_typ) ^ " and " ^ (string_of_typ exp3.expr_typ) ^ " were given")
			| _ as ty -> error loc ("bool expected after command if, but " ^ (string_of_typ ty) ^ " was given")
	end

	| PEnil -> (* le pointeur nul *)
		TEnil, tvoid, false

	| PEident {id=id} -> begin (* Utilisation des variables, on doit vérifier qu'elles existent bien dans l'environnement actuel *)
		if id = "_" then error loc ("_ can not be used as a variable") else
		if Env.mem id !env
		then begin
			let v = Env.find id !env in
			v.v_used <- true;
			TEident(v), v.v_typ, false
			end
		else error loc ("unbound variable " ^ id)
	end

	| PEdot (e, id) -> begin (* seuls les pointeurs sur des structures contiennent de l'information *)
		if e.pexpr_desc = PEnil then error loc ("nil does not contain information") else
		let exp, rt = expr env e in
		match exp.expr_typ with
			| Tptr (Tstruct s) ->
				let fields = s.s_fields in
				if Hashtbl.mem fields id.id
				then let field = Hashtbl.find fields id.id in TEdot(exp, field), field.f_typ, false
				else error loc ("structure " ^ s.s_name ^ " does not contain field named " ^ id.id)
			| _ as ty -> error loc ("type " ^ (string_of_typ ty) ^ " cannot contain information, a pointer on a structure is expected")
	end

	| PEassign (lvl, el) -> begin
		error loc ("assign ?")
	end

	| PEreturn el -> begin (* Le type de ce qui est retourné doit correspondre au type de la fonction appelée *)
		let expl = List.map (fun e -> fst (expr env e)) el in
		let typs = flatten (List.map (fun exp -> exp.expr_typ) expl) in
		let types = match typs with
			| [x] -> x
			| _ as l -> Tmany(l)
		in if types = !ret_typ
		then TEreturn(expl), tvoid, true
		else error loc ("the function is expected to return " ^ (string_of_typ !ret_typ) ^ " but here it returns " ^ (string_of_typ types))
	end

	| PEblock el -> begin (* Dans un bloc toutes les expressions doivent être de types unit sauf éventuellement la dernière *)
		let expl = List.map (fun e -> fst (expr env e)) el in
		let rtl = List.map (fun e -> snd (expr env e)) el in
		let typl = List.map (fun exp -> exp.expr_typ) expl in
		let rec aux = function
			| [] -> tvoid
			| [ty] -> ty
			| ty :: reste ->
				if ty = tvoid
				then aux reste
				else error loc ("in a block all expressions except the last one must have type unit, but here a type " ^ (string_of_typ ty) ^ " expression is given")
		in TEblock(expl), (aux typl), (List.exists (fun x -> x) rtl)
	end

	| PEincdec (e, op) -> begin (* seuls les entiers qui sont des l-values peuvent être incrémentés ou décrémentés *)
		if is_l_value e
		then 
			let exp, rt = expr env e in
			match exp.expr_typ with
				| Tint -> TEincdec(exp, op), tvoid, false
				| _ as ty -> error loc ("only integers can be incremented/decremented, but " ^ (string_of_typ ty) ^ " was given")
		else error loc ("only l-values can be incremented/decremented")
	end

	| PEvars (idl, None, el) -> begin (* Déclaration de variables avec type implicite *)
		if el = []
		then error loc ("type must be declared in empty declarations")
		else begin
			let types = flatten(List.map (fun e -> (fst (expr env e)).expr_typ) el) in
			let rec make_vars l = function
				| [], [] -> l
				| id :: r1, ty :: r2 ->
					let new_env, v = Env.var id.id id.loc ty !env
					in env := new_env; v :: l
				| _ -> error loc ("incorrect number of arguments in the declaration")
			in let vars = make_vars [] (idl, types)
			in TEvars(vars, List.map (fun e -> (fst (expr env e))) el), tvoid, false
		end
	end

	| PEvars (idl, Some ptyp, el) -> begin (* Déclaration de variables en précisant le type *)
		let ty = type_type ptyp in
		if el = []
		then TEvars((List.map (fun id -> (let new_env, v = Env.var id.id id.loc ty !env in env := new_env; v)) idl), []), tvoid, false
		else begin
			let types = flatten(List.map (fun e -> (fst (expr env e)).expr_typ) el) in
			let rec make_vars l = function
				| [], [] -> l
				| id :: r1, typ :: r2 ->
					if eq_type ty typ
					then
						let new_env, v = Env.var id.id id.loc ty !env
						in env := new_env; v :: l
					else error loc ("wrong type in the declaration, " ^ (string_of_typ typ) ^ " was given but " ^ (string_of_typ ty) ^ " was expected")
				| _ -> error loc ("incorrect number of arguments in the declaration")
			in let vars = make_vars [] (idl, types)
			in TEvars(vars, List.map (fun e -> (fst (expr env e))) el), tvoid, false
		end
	end


let found_main = ref false

(* 1. declare structures *)
let phase1 = function
	| PDstruct ps -> add_pstruct ps
	| PDfunction _ -> ()


(* 2. declare functions and type fields *)
let phase2 = function
	| PDfunction pf ->
		if pf.pf_name.id = "main" (* on traite à part l'ajout de la fonction main à l'environnement *)
		then begin
			found_main := true;
			if (List.length pf.pf_params) <> 0
				then error pf.pf_name.loc ("function main does not take any argument")
			else if (List.length pf.pf_typ) <> 0
				then error pf.pf_name.loc ("function main is expected to have type void")
		end;
		add_pfunc pf 
	| PDstruct _ -> () 


(* 3. type check function bodies *)
let decl = function
	| PDfunction pf ->
		let f, env_f, body_f = pfunc_to_function_ pf in
		ret_typ := typl_to_typ f.fn_typ;
		let env = ref env_f in
		let e, rt = expr env body_f in
		if (f.fn_typ <> []) && (not rt)
		then error pf.pf_name.loc ("this function is expected to return something, but does not always do so")
		else TDfunction (f, e)
	| PDstruct ps ->
		TDstruct (pstruct_to_structure ps)


let file ~debug:b (imp, dl) =
	debug := b;
	fmt_imported := imp;
	List.iter phase1 dl;
	check_rec ();
	List.iter phase2 dl;
	if not !found_main then error dummy_loc "missing method main";
	let dl = List.map decl dl in
	Env.check_unused ();
	if !fmt_imported && (not !fmt_used) then error dummy_loc "fmt imported but not used";
	dl
