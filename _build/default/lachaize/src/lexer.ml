# 4 "lachaize/src/lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string

  let kwd_tbl = [
      "else", ELSE;
      "false", CST (Cbool false);
      "for", FOR;
      "func", FUNC;
      "if", IF;
      "import", IMPORT;
      "nil", NIL;
      "package", PACKAGE;
      "return", RETURN;
      "struct", STRUCT;
      "true", CST (Cbool true);
      "type", TYPE;
      "var", VAR;
  ]
  let id_or_kwd s = try List.assoc s kwd_tbl with _ -> IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }
  let newlines s lexbuf =
    String.iter (fun c -> if c = '\n' then newline lexbuf) s

  let string_buffer = Buffer.create 1024

  let nosemicolon = ref true

# 38 "lachaize/src/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\221\255\222\255\223\255\078\000\088\000\225\255\226\255\
    \227\255\228\255\002\000\003\000\030\000\031\000\032\000\022\000\
    \001\000\243\255\245\255\049\000\053\000\248\255\249\255\250\255\
    \112\000\105\000\003\000\139\000\141\000\252\255\001\000\253\255\
    \239\255\238\255\241\255\240\255\229\255\230\255\235\255\233\255\
    \231\255\193\000\216\000\241\000\247\255\248\255\249\255\218\000\
    \255\255\250\255\251\255\252\255\253\255\254\255\162\000\252\255\
    \253\255\254\255\106\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\031\000\031\000\255\255\255\255\
    \255\255\255\255\023\000\021\000\034\000\019\000\018\000\034\000\
    \013\000\255\255\255\255\009\000\008\000\255\255\255\255\255\255\
    \004\000\011\000\000\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\031\000\255\255\255\255\255\255\255\255\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\045\000\000\000\000\000\000\000\049\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\026\000\031\000\028\000\026\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\014\000\003\000\028\000\000\000\017\000\016\000\034\000\
    \009\000\008\000\018\000\020\000\022\000\019\000\021\000\025\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\012\000\023\000\010\000\013\000\011\000\040\000\
    \039\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\038\000\037\000\036\000\033\000\024\000\
    \032\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\007\000\015\000\006\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\035\000\029\000\027\000\026\000\028\000\026\000\
    \030\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\000\000\027\000\057\000\028\000\000\000\000\000\
    \041\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\000\000\058\000\000\000\000\000\024\000\
    \041\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\046\000\051\000\000\000\000\000\000\000\
    \002\000\255\255\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\048\000\000\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \053\000\000\000\000\000\000\000\000\000\047\000\052\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\030\000\026\000\026\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\026\000\255\255\000\000\000\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\013\000\014\000\019\000\000\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\015\000\025\000\027\000\027\000\028\000\028\000\
    \025\000\058\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\255\255\027\000\054\000\028\000\255\255\255\255\
    \005\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\054\000\255\255\255\255\024\000\
    \005\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\043\000\047\000\255\255\255\255\255\255\
    \000\000\030\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\255\255\043\000\255\255\255\255\255\255\255\255\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\255\255\
    \255\255\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\047\000\255\255\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \047\000\255\255\255\255\255\255\255\255\043\000\047\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\054\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\047\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\043\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_token lexbuf =
   __ocaml_lex_next_token_rec lexbuf 0
and __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 50 "lachaize/src/lexer.mll"
                      s
# 217 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lachaize/src/lexer.mll"
      ( newlines s lexbuf;
        if !nosemicolon then next_token lexbuf else SEMICOLON )
# 222 "lachaize/src/lexer.ml"

  | 1 ->
# 54 "lachaize/src/lexer.mll"
      ( next_token lexbuf )
# 227 "lachaize/src/lexer.ml"

  | 2 ->
# 56 "lachaize/src/lexer.mll"
      ( newline lexbuf;
        if !nosemicolon then next_token lexbuf else SEMICOLON )
# 233 "lachaize/src/lexer.ml"

  | 3 ->
# 59 "lachaize/src/lexer.mll"
      ( comment lexbuf; next_token lexbuf )
# 238 "lachaize/src/lexer.ml"

  | 4 ->
let
# 60 "lachaize/src/lexer.mll"
             id
# 244 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 61 "lachaize/src/lexer.mll"
      ( id_or_kwd id )
# 248 "lachaize/src/lexer.ml"

  | 5 ->
# 63 "lachaize/src/lexer.mll"
      ( SEMICOLON )
# 253 "lachaize/src/lexer.ml"

  | 6 ->
# 65 "lachaize/src/lexer.mll"
      ( COMMA )
# 258 "lachaize/src/lexer.ml"

  | 7 ->
# 67 "lachaize/src/lexer.mll"
      ( DOT )
# 263 "lachaize/src/lexer.ml"

  | 8 ->
# 69 "lachaize/src/lexer.mll"
      ( PLUS )
# 268 "lachaize/src/lexer.ml"

  | 9 ->
# 71 "lachaize/src/lexer.mll"
      ( MINUS )
# 273 "lachaize/src/lexer.ml"

  | 10 ->
# 73 "lachaize/src/lexer.mll"
      ( STAR )
# 278 "lachaize/src/lexer.ml"

  | 11 ->
# 75 "lachaize/src/lexer.mll"
      ( SLASH )
# 283 "lachaize/src/lexer.ml"

  | 12 ->
# 77 "lachaize/src/lexer.mll"
      ( PERCENT )
# 288 "lachaize/src/lexer.ml"

  | 13 ->
# 79 "lachaize/src/lexer.mll"
      ( AMP )
# 293 "lachaize/src/lexer.ml"

  | 14 ->
# 81 "lachaize/src/lexer.mll"
      ( AMPERSANDAMPERSAND )
# 298 "lachaize/src/lexer.ml"

  | 15 ->
# 83 "lachaize/src/lexer.mll"
      ( VERTICALBARVERTICALBAR )
# 303 "lachaize/src/lexer.ml"

  | 16 ->
# 85 "lachaize/src/lexer.mll"
      ( PLUSPLUS )
# 308 "lachaize/src/lexer.ml"

  | 17 ->
# 87 "lachaize/src/lexer.mll"
      ( MINUSMINUS )
# 313 "lachaize/src/lexer.ml"

  | 18 ->
# 89 "lachaize/src/lexer.mll"
      ( BANG )
# 318 "lachaize/src/lexer.ml"

  | 19 ->
# 91 "lachaize/src/lexer.mll"
      ( EQ )
# 323 "lachaize/src/lexer.ml"

  | 20 ->
# 93 "lachaize/src/lexer.mll"
      ( COLONEQ )
# 328 "lachaize/src/lexer.ml"

  | 21 ->
# 95 "lachaize/src/lexer.mll"
      ( COMP Bgt )
# 333 "lachaize/src/lexer.ml"

  | 22 ->
# 97 "lachaize/src/lexer.mll"
      ( COMP Bge )
# 338 "lachaize/src/lexer.ml"

  | 23 ->
# 99 "lachaize/src/lexer.mll"
      ( COMP Blt )
# 343 "lachaize/src/lexer.ml"

  | 24 ->
# 101 "lachaize/src/lexer.mll"
      ( COMP Ble )
# 348 "lachaize/src/lexer.ml"

  | 25 ->
# 103 "lachaize/src/lexer.mll"
      ( COMP Beq )
# 353 "lachaize/src/lexer.ml"

  | 26 ->
# 105 "lachaize/src/lexer.mll"
      ( COMP Bne )
# 358 "lachaize/src/lexer.ml"

  | 27 ->
# 107 "lachaize/src/lexer.mll"
      ( LEFTPAR )
# 363 "lachaize/src/lexer.ml"

  | 28 ->
# 109 "lachaize/src/lexer.mll"
      ( RIGHTPAR )
# 368 "lachaize/src/lexer.ml"

  | 29 ->
# 111 "lachaize/src/lexer.mll"
      ( LEFTBRACE )
# 373 "lachaize/src/lexer.ml"

  | 30 ->
# 113 "lachaize/src/lexer.mll"
      ( RIGHTBRACE )
# 378 "lachaize/src/lexer.ml"

  | 31 ->
let
# 114 "lachaize/src/lexer.mll"
               s
# 384 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 115 "lachaize/src/lexer.mll"
      ( try let n = Int64.neg (Int64.of_string ("-" ^ s)) in CST (Cint n)
	with _ -> raise (Lexing_error "literal constant too large") )
# 389 "lachaize/src/lexer.ml"

  | 32 ->
# 118 "lachaize/src/lexer.mll"
      ( STRING (string lexbuf) )
# 394 "lachaize/src/lexer.ml"

  | 33 ->
# 120 "lachaize/src/lexer.mll"
      ( EOF )
# 399 "lachaize/src/lexer.ml"

  | 34 ->
let
# 121 "lachaize/src/lexer.mll"
         c
# 405 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 122 "lachaize/src/lexer.mll"
      ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 409 "lachaize/src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 43
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 126 "lachaize/src/lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 423 "lachaize/src/lexer.ml"

  | 1 ->
# 130 "lachaize/src/lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 429 "lachaize/src/lexer.ml"

  | 2 ->
# 133 "lachaize/src/lexer.mll"
      ( Buffer.add_char string_buffer '\t';
	string lexbuf )
# 435 "lachaize/src/lexer.ml"

  | 3 ->
# 136 "lachaize/src/lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 441 "lachaize/src/lexer.ml"

  | 4 ->
# 139 "lachaize/src/lexer.mll"
      ( Buffer.add_char string_buffer '\\';
	string lexbuf )
# 447 "lachaize/src/lexer.ml"

  | 5 ->
let
# 141 "lachaize/src/lexer.mll"
               c
# 453 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 142 "lachaize/src/lexer.mll"
      ( raise (Lexing_error ("illegal escape character " ^ String.make 1 c)) )
# 457 "lachaize/src/lexer.ml"

  | 6 ->
# 144 "lachaize/src/lexer.mll"
      ( raise (Lexing_error "unclosed string") )
# 462 "lachaize/src/lexer.ml"

  | 7 ->
let
# 145 "lachaize/src/lexer.mll"
         c
# 468 "lachaize/src/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 146 "lachaize/src/lexer.mll"
      ( Buffer.add_char string_buffer c;
	string lexbuf )
# 473 "lachaize/src/lexer.ml"

  | 8 ->
# 149 "lachaize/src/lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 478 "lachaize/src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 54
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 152 "lachaize/src/lexer.mll"
         ( () )
# 490 "lachaize/src/lexer.ml"

  | 1 ->
# 153 "lachaize/src/lexer.mll"
         ( newline lexbuf; comment lexbuf )
# 495 "lachaize/src/lexer.ml"

  | 2 ->
# 154 "lachaize/src/lexer.mll"
         ( comment lexbuf )
# 500 "lachaize/src/lexer.ml"

  | 3 ->
# 155 "lachaize/src/lexer.mll"
         ( raise (Lexing_error "unterminated comment") )
# 505 "lachaize/src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 157 "lachaize/src/lexer.mll"
 

  (* point-virgule automatique après ident, int, string, return, ), } *)
  let next_token lexbuf =
    let t = next_token lexbuf in
    match t with
    | IDENT _ | CST _ | STRING _ | NIL | RETURN
    | PLUSPLUS | MINUSMINUS | RIGHTPAR | RIGHTBRACE ->
       nosemicolon := false; t
    | _ -> nosemicolon := true; t


# 525 "lachaize/src/lexer.ml"
